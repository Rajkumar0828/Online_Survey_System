using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Survey_System.Data;
using Survey_System.Model;

using Microsoft.EntityFrameworkCore;
using System.Net.Mail;
using System.Net;
using System.Reflection.Metadata.Ecma335;

namespace Survey_System.Controllers
{
    [Route("api/[controller]")]
    [ApiController]

    public class SurveyController : ControllerBase
    {
        private readonly AppDbContext _surveys;
        private readonly IEmailService _emailService;

        public SurveyController(AppDbContext surveys,IEmailService emailService)
        {
            _surveys = surveys;
            _emailService = emailService;
           
        }

        [HttpPost]
        public async Task<ActionResult<Survey>> AddSurvey(SurveyDto survey)
        {
            Survey survey1 = new Survey()
            {
                Title = survey.Title,
                Description = survey.Description,
                CreatedAt = DateTime.Now,
                urlid = Guid.NewGuid().ToString()
            };

            _surveys.Add(survey1);
            await _surveys.SaveChangesAsync();

            // After saving changes, EF Core will automatically update the SurveyId of survey1
            // with the id generated by the database.
            

            return Ok(survey1);
        }


        [HttpPost("AddQuestions")]
            public ActionResult AddQuestionsToSurvey([FromBody] AddQuestionDto addQuestionsDto,int id)
            {
                // Find the survey using the ID from the DTO
                Survey survey = _surveys.Surveys.Find(addQuestionsDto.SurveyId);

            SurveyUser user = _surveys.Users.FirstOrDefault(s => s.SurveyUserID == id);

                if (survey == null)
                {
                    return NotFound("Survey not found");
                }

                // Loop through each questionDto in the Questions list
                foreach (var questionDto in addQuestionsDto.Questions)
                {
                    // Create a new question for each text in the Texts list
                    foreach (var text in questionDto.Texts)
                    {
                        Question question = new Question()
                        {
                            QuestionId = 0,
                            Text = text,
                            surveys = survey
                        };

                        // Add the question to the Questions table
                        _surveys.Questions.Add(question);
                    }
                }

                // Save changes to the database
                _surveys.SaveChanges();

                // Loop through each questionDto in the Questions list again to add options
                foreach (var questionDto in addQuestionsDto.Questions)
                {
                    // Find the question using the text
                    Question question = _surveys.Questions.FirstOrDefault(q => q.Text == questionDto.Texts[0] && q.surveys == survey);

                    // Create a new option for each optionText in the Options list
                    foreach (var optionText in questionDto.Options)
                    {
                        Option option = new Option()
                        {
                            Text = optionText,
                            OptionId = 0,
                            Question = question
                        };

                        // Add the option to the Options table
                        _surveys.Options.Add(option);
                    }
                }

            // Save changes to the database
            
            _surveys.SaveChanges();
            SendEmailToAdminAsync(user);

            return Ok();
            }

        private async Task SendEmailToAdminAsync(SurveyUser user)
        {
            try
            {
                var email =user.UserEmail;
                
                var adminEmail = email; // Replace with actual admin email address
                var subject = $"Leave Request from Employee";
                var body = $"Leave request details:\n\nEmployee Name:\nLeave Type\nStart Date: \nEnd Date:\nNo of days :";

                await _emailService.SendEmailAsync(adminEmail, subject, body);
                // Log success or handle any exceptions
            }
            catch (Exception ex)
            {
                // Log or handle the exception
                return;
            }
        }


        [HttpGet("{id}")]
            public ActionResult GetSurvey(string id)
            {
                var survey = _surveys.Surveys
                    .Include(s => s.Questions)
                        .ThenInclude(q => q.Options)
                    .FirstOrDefault(s => s.urlid == id);

                if (survey == null)
                {
                    return NotFound();
                }

                return Ok(survey);
            }
            [HttpGet("GetallSurveys")]
            public ActionResult GetSurveys()
            {
                var surveys = _surveys.Surveys
                    .Include(s => s.Questions)
                        .ThenInclude(q => q.Options)
                    .ToList();

                if (surveys == null || !surveys.Any())
                {
                    return NotFound();
                }

                return Ok(surveys);
            }




            [HttpPut("UpdateQuestion")]
            public ActionResult UpdateQuestionInSurvey([FromBody] UpdateQuestionDto updateQuestionDto)
            {
                // Find the survey using the ID from the DTO
                Survey survey = _surveys.Surveys.Find(updateQuestionDto.SurveyId);
                if (survey == null)
                {
                    return NotFound("Survey not found");
                }

                // Find the question using the ID
                Question question = _surveys.Questions.FirstOrDefault(q => q.QuestionId == updateQuestionDto.QuestionId && q.surveys == survey);

                if (question != null)
                {
                    // Update the question text
                    question.Text = updateQuestionDto.NewQuestionText;

                    // Check if the question has options before trying to remove them
                    if (question.Options != null)
                    {
                        _surveys.Options.RemoveRange(question.Options);
                        question.Options.Clear(); // Clear the options list
                    }

                    // Create a new option for each optionText in the NewOptions list
                    foreach (var optionText in updateQuestionDto.NewOptions)
                    {
                        Option option = new Option()
                        {
                            Text = optionText,
                            OptionId = 0,
                            Question = question
                        };

                        // Add the option to the Options table
                        _surveys.Options.Add(option);
                    }

                    // Save changes to the database
                    _surveys.SaveChanges();

                    return Ok();
                }
                else
                {
                    return NotFound("Question not found");
                }
            }


            [HttpDelete("DeleteQuestion")]
            public ActionResult DeleteQuestionInSurvey([FromBody] DeleteQuestionDto deleteQuestionDto)
            {
                // Find the survey using the ID from the DTO
                Survey survey = _surveys.Surveys.Find(deleteQuestionDto.SurveyId);
                if (survey == null)
                {
                    return NotFound("Survey not found");
                }

                // Find the question using the ID
                Question question = _surveys.Questions.FirstOrDefault(q => q.QuestionId == deleteQuestionDto.QuestionId && q.surveys == survey);

                if (question != null)
                {
                    // Check if the question has options before trying to remove them
                    if (question.Options != null)
                    {
                        _surveys.Options.RemoveRange(question.Options);
                    }

                    // Remove the question
                    _surveys.Questions.Remove(question);

                    // Save changes to the database
                    _surveys.SaveChanges();

                    return Ok();
                }
                else
                {
                    return NotFound("Question not found");
                }
            }


            [HttpPost("AddResponses")]
            public ActionResult AddResponsesToQuestions([FromBody] AddResponseDto addResponseDto)
            {
                // Find the survey, question, and user using the IDs from the DTO
                Survey survey = _surveys.Surveys.Find(addResponseDto.SurveyId);
                Question question = _surveys.Questions.Find(addResponseDto.QuestionId);
                SurveyUser user = _surveys.Users.Find(addResponseDto.UserId);

                if (survey == null || question == null || user == null)
                {
                    return NotFound("Survey, question, or user not found");
                }

                // Create a new response
                Response response = new Response()
                {
                    ResponseId = 0,
                    SubmittedAt = DateTime.Now,
                    surveys = survey,
                    Questions = question,
                    Users = user,
                    Answers = addResponseDto.Answers
                };

                // Add the response to the Responses table
                _surveys.Responses.Add(response);

                // Save changes to the database
                _surveys.SaveChanges();

                return Ok();
        }

        [HttpGet("GetResponses by id")]
        public ActionResult GetResponsesBySurveyId([FromQuery] int surveyId)
        {
            // Find the survey using the ID from the query
            Survey survey = _surveys.Surveys.Find(surveyId);

            if (survey == null)
            {
                return NotFound("Survey not found");
            }

            // Get all responses for the given survey
            List<Response> responses = _surveys.Responses.Where(r => r.surveys.SurveyId == surveyId).ToList();

            if (responses.Count == 0)
            {
                return NotFound("No responses found for the given survey");
            }

            return Ok(responses);
        }
        [HttpGet("GetResponsesbylist")]
        public ActionResult GetallResponsesBySurveys([FromQuery] int surveyId)
        {
            // Find the survey using the ID from the query
            Survey survey = _surveys.Surveys.Find(surveyId);

            if (survey == null)
            {
                return NotFound("Survey not found");
            }

            // Get all responses for the given survey
            var responses = _surveys.Responses
                                    .Where(r => r.surveys.SurveyId == surveyId)
                                    .Select(r => new
                                    {
                                        SurveyId = r.surveys.SurveyId,
                                        UserId =r.Users.SurveyUserID,
                                        Response = r.Answers // Assuming 'ResponseText' is the column for responses
                                    })
                                    .ToList();

            if (responses.Count == 0)
            {
                return NotFound("No responses found for the given survey");
            }

            return Ok(responses);
        }

        [HttpGet("GetAllResponses")]
        public ActionResult GetAllResponses()
        {
            // Get all responses from the database
            var responses = _surveys.Responses
                                    .Select(r => new
                                    {
                                        SurveyId = r.surveys.SurveyId,
                                        UserId = r.Users.SurveyUserID,
                                        Response = r.Answers // Assuming 'ResponseText' is the column for responses
                                    })
                                    .ToList();

            if (responses.Count == 0)
            {
                return NotFound("No responses found in the database");
            }

            return Ok(responses);
        }







        //[HttpPost("AddQuestion")]

        //public ActionResult AddQuestionToSurvey([FromBody] AddQuestionDto addQuestionDto)
        //{
        //    Survey survey = _surveys.Surveys.Find(addQuestionDto.SurveyId)!;
        //    Question question = new Question()
        //    {
        //        QuestionId=0,
        //        Text = addQuestionDto.Question,
        //        surveys= survey

        //    };
        //    _surveys.Questions.Add(question);
        //    _surveys.SaveChanges();
        //    for (int i = 0; i < addQuestionDto.Options.Count; i++)
        //    {
        //        Option option = new Option()
        //        {
        //            Text= addQuestionDto.Options[i],
        //            OptionId=0,
        //            Question= question

        //        };
        //        _surveys.Options.Add(option);
        //        _surveys.SaveChanges();

        //    }





        //    return Ok();
        //}
        //[HttpPost]
        //public IActionResult SurveysResponse()
        //{

        //}
    }
    
    }
public interface IEmailService
{
    Task SendEmailAsync(string toEmail, string subject, string body);
}

// Implement your email service (e.g., using SmtpClient)
public class EmailService : IEmailService
{
    public async Task SendEmailAsync(string toEmail, string subject, string body)
    {

        using (var client = new SmtpClient("smtp-mail.outlook.com"))
        {
            client.Port = 587;
            client.Credentials = new NetworkCredential("ashamold2002@gmail.com", "AshaShneha_._2705");
            client.EnableSsl = true;

            var message = new MailMessage
            {
                From = new MailAddress("ashamold2002@gmail.com"),
                Subject = subject,
                Body = body,
                IsBodyHtml = false
            };
            message.To.Add(toEmail);

            await client.SendMailAsync(message);
        }
    }

}




